#!/usr/bin/env perl
# Unroll xod generated code (targetted to xod 0.14.0)
# --- $some.cpp ... 
# creates 3 arduino projects for each input file: 
# {$some}_unroll/{$some}_unroll.ino # unrolled
# ${some}_wtimer/${some}_wtimer.ino # original code but with a performance timer
# {$some}_unroll_wtimer/{$some}_unroll_wtimer.ino # unrolled, with performance timer
# The performance-timer outputs elapsed time per 100 "transactions"

use strict; use warnings; no warnings 'uninitialized'; use 5.010; no if ($^V ge v5.18.0), warnings => 'experimental::smartmatch';
use File::Basename qw(dirname basename);

# Yes, we are very literal
our $ReplaceLoop = <<'EOS';
    for (NodeId nid = 0; nid < NODE_COUNT; ++nid) {
        if (isNodeDirty(nid)) {
            evaluateNode(nid);

            // If the schedule is stale, clear timeout so that
            // the node would not be marked dirty again in idle
            if (isTimedOut(nid))
                clearTimeout(nid);
        }
    }
EOS

our $xod_code;

sub unroll {
    my ($input, $output) = @_;
    say "$input -> $output";

    $xod_code = `cat "$input"`; # rude slurp, because I'm lazy

    my $uh = IO::File->new(">$output") || die $!;
    
    my $node_count = get_node_count();
    say "Nodes $node_count";

    my $eval_functions = collect_eval_functions();
    replace_the_loop($node_count, $eval_functions);
    
    print $uh $xod_code;
    $uh->close;

    move_runTransaction($output); # have to move to end

    return $output;
    }

sub collect_eval_functions {
    # find the function name for each node-index
    # looks like
    # const xod__core__constant_number::Wiring wiring_0 PROGMEM = {
    # &xod__core__constant_number::evaluate,

    my @fn;
    my $i=0;
    for my $function_name ($xod_code =~ / wiring_\d+ PROGMEM = {\s+&([^,]+)/sg) {
        $fn[$i] = $function_name;
        say "  [$i] $function_name";
        $i++;
        }
    \@fn;
    }
             
sub get_node_count {
    my ($ct) = $xod_code =~ /^#define NODE_COUNT\s+(\d+)/m;
    die "No #define NODE_COUNT" if !defined($ct);
    say "## $ct";
    return $ct;
    }

sub replace_the_loop {
    my ($node_count, $eval_function) = @_;
    my @unrolled;

    push @unrolled, '// Unrolled';


    foreach my $node_index ((0..$node_count-1)) {
        push @unrolled, "if (isNodeDirty($node_index)) {";
        push @unrolled, "    " . $eval_function->[$node_index] ."($node_index);";
        push @unrolled, "    if (isTimedOut($node_index))";
        push @unrolled, "        clearTimeout($node_index);";

        push @unrolled, "}";
        }

    # not trying to be efficient in our editing

    my $replacement = "    ".join("\n    ", @unrolled)."\n";
    $xod_code =~ s/\Q$ReplaceLoop\E/$replacement/;
    }

sub parse_out_block {
  # string, ...
  my ($file, $start_re) = @_[1,2]; # @_[0] is the string

  $_[0] =~ $start_re;

  my ($before, $startline, $rest) = ($`, $&, $');
  die "Can't find $start_re in $file" if !$before;

  my ($indent) = $startline =~ /^(\s*)/m; # could be ''

  # now find '   }'
  $rest =~ /^$indent}/m;
  my ($body, $endline, $rest2) = ($`, $&, $');
  die "Can't find end of $start_re as '$indent}' in $file\n---\n$rest" if !$body;

  return ($before, $startline, $body, $endline, $rest2);
  }

sub move_runTransaction {
    # Have to move runTransaction() after the node declarations
    # and add a declare

    my ($file) = @_;
    my $code = `cat "$file"`;

    # find the decl, and matching '}'. crude.
    my ($before, $startline, $body, $endline, $rest) = parse_out_block($code, $file, qr/^void runTransaction\(\) {/m);

    # need decl before void loop
    ($rest =~ s/void loop\(\)/namespace xod{void runTransaction();}\n\nvoid loop()/) or die "Can't find 'void loop()'";

    my $oh = IO::File->new(">$file");
    print $oh $before,$rest;
    say $oh "\n";
    say $oh 'namespace xod {';
    say $oh $startline, $body;
    say $oh $endline;
    say $oh "}";
    $oh->close;
    }

sub add_timer {
    my ($file) = @_;
    my $outfile = basename_wo_ext($file) . "_wtimer";

    my $code = `cat "$file"`;

    # enable serial
    $code =~ s/^\/\/(#define XOD_DEBUG)/$1/m;

    my ($before, $loopline, $body, $endline, $rest) = parse_out_block($code, $file, qr/^void loop\(\) {/m );

    mkdir($outfile);
    my $oh = IO::File->new(">$outfile/$outfile.ino");
    say $oh $before,$loopline;
    say $oh '    static int loop_count = 0;';
    say $oh '    static unsigned long start_time = millis();';
    say $oh '';
    print $oh $body;
    print $oh <<'EOS'; # C Code:

    // doctoring: say how long 100 executions takes
    memset(xod::g_dirtyFlags, 255, sizeof(xod::g_dirtyFlags));
    loop_count++;
    if (loop_count >= 100) {
        Serial.println( millis() - start_time );
        start_time = millis();
        loop_count = 0;
        }
EOS
    print $oh $endline;
    print $oh $rest;
    $oh->close;

    return "$outfile/$outfile.ino";
    }

sub remove_EvalFuncPtr {
    my ($file) = @_;
    my $outfile = basename_wo_ext($file) . "_noevalptr";

    my $code = `cat "$file"`;

    # remove the field like:
    # struct Wiring {
    # EvalFuncPtr eval;
    $code =~ s/(struct Wiring \{)\s+EvalFuncPtr eval;/$1/sg;

    # remove the initializer entry like:
    # const xod__core__constant_number::Wiring wiring_0 PROGMEM = {
    # &xod__core__constant_number::evaluate,
    $code =~ s/(wiring_\d+ PROGMEM = \{)\s+&[^,]+,/$1/sg;
    
    # remove dead code
    my ($before, $s,$b,$e, $rest) = parse_out_block($code, $file, qr/void evaluateNode\(NodeId nid\) {/m );
    $code = $before . $rest;

    mkdir($outfile);
    my $oh = IO::File->new(">$outfile/$outfile.ino");
    print $oh $code;

    return "$outfile/$outfile.ino";
    }

sub basename_wo_ext {
    # get basename and remove extension
    my ($input) = @_;
    my $rez = basename($input);
    $rez =~ s/\.[^.]+$//; # remove extension
    $rez;
    }

sub main {
    foreach my $input (@ARGV) {
        if (!-e $input) {
            warn "Expected an existing file for input, saw ''";
            next;
            }

        add_timer($input); # we want a timer version

        my @unrolled; # list of unrolled projects

        my $output = basename_wo_ext($input);
        $output .= "_unroll";
        mkdir($output);

        push @unrolled, unroll($input, "$output/$output.ino");
        push @unrolled, add_timer("$output/$output.ino");

        # for all the unrolled projects, make a remove_EvalFuncPtr version
        push @unrolled, map { remove_EvalFuncPtr($_); } @unrolled;

        system("find . -name '*.ino' | xargs wc -l -c");
        }
    }

main();

